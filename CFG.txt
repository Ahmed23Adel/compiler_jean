code --> stmt code | None   # the whole program


# regular statements
stmt --> var = expr  

expr --> term add_op expr
expr --> term 

term --> factor mult_op term
term --> factor

factor --> ( expr )
factor --> num
factor --> var
factor --> funcall    #fnnnnnnnnnn

# not tested - for neg nums 
factor --> -( expr )
factor --> -num
factor --> -var

# conditional statements
stmt --> ( expr )? {code} else  # if 
else --> !(expr)? {code} else   # else if 
else --> !{code}               # only else
else --> None                   # No else


# loops
stmt --> loop
loop --> var : *(expr)? { code }


# break stmt 
stmt --> break 

# Functions declaration 
stmt --> inline_fun_decl | fun_decl
inline_fun_decl --> var (args): ret = expr |  var (args) = expr 
fun_decl --> var (args): ret = {code}
 

# Function calls
funcall --> var() | var(expr_list)
args --> none | arg1 arg2 
arg1 --> var : dtype
arg2 --> , var : dtype : arg2 | None


####
var variable
num number
( )
{ }
dtype 
break 
op operator

